@page "/flights"
@using Assignment2.Data
@*Part 1*@
<h3 class="pagehead">Flight Finder</h3>

<div class="finder">
    <div class="from">
        <div>From</div>
        <select class="finderBar" @onchange="getDeparture">
            <option value="" disabled selected hidden>Any</option>
            @foreach (string airport in airports)
            {
                <option value="@airport">@airport</option>
            }
        </select>
    </div>
    <div class="to">
        <div>To</div>
        <select class="finderBar" @onchange="getArriving">
            <option value="" disabled selected hidden>Any</option>
            @foreach (string airport in airports)
            {
                <option value="@airport">@airport</option>
            }
        </select>
    </div>
    <div class="day">
        <div>Day</div>
        <select class="finderBar" @onchange="getDay">
            <option value="" disabled selected hidden>Any</option>
            <option value="Monday">Monday</option>
            <option value="Tueaday">Tuesday</option>
            <option value="Wednesday">Wednesday</option>
            <option value="Thursday">Thursday</option>
            <option value="Friday">Friday</option>
            <option value="Saturday">Saturday</option>
            <option value="Sunday">Sunday</option>
        </select>
    </div>
    <div class="findButton">
        <button class="findFlightsbutton" @onclick="findFlights">Find Flights</button>
    </div>
</div>

@*Part 2*@
<div class="flights flights-div">
    <h3 class="pagehead">Flights</h3>
    <select class="flightsName" @onchange="getInfo">
        <option value="" disabled selected hidden>Loading...</option>
        @if (conditionedFlights.Count == 0 && clickFindFlights > 0)
        {
            <option value="" disabled selected hidden>Flight does not exist.</option>
        }
        else if (conditionedFlights.Count > 0)
        {
            <option value="@conditionedFlights[0]" selected hidden>@conditionedFlights[0].ToString()</option>
            @foreach (Flight flight in conditionedFlights)
            {
                <option value="@flight">@flight.ToString()</option>
            }
        }
    </select>
    <span>@cautionInfo</span>
</div>

@*Part 3*@
<h3 class="pagehead reserve-div">Reserve</h3>
<div class="reserve-fill">
    <div class="reserveFlightCode">
        <div>Flight code:</div>
        <input placeholder="Flight" type="text" @bind="chosenFlightCode" />
    </div>
    <div class="reserveAirline">
        <div>Airline:</div>
        <input placeholder="Airline" type="text" @bind="chosenAirline" />
    </div>
    <div class="reserveDay">
        <div>Day:</div>
        <input placeholder="Day" type="text" @bind="chosenDay" />
    </div>
    <div class="reserveTime">
        <div>Time:</div>
        <input placeholder="Time" type="text" @bind="chosenTime" />
    </div>
    <div class="reserveCost">
        <div>Cost:</div>
        <input placeholder="0" type="text" @bind="chosenCost" />
    </div>
    <div class="reserveName">
        <div>Name:</div>
        <input placeholder="Name" type="text" @bind="writtenName" />
    </div>
    <div class="reserveCitizenship">
        <div>Citizenship:</div>
        <input placeholder="Citizenship" type="text" @bind="citizenship" />
    </div>
</div>
<div class="bottom">
    @* <p @bind-="@cautionInfo">@cautionInfo</p> *@
    <button class="reservebutton" @onclick="makeReservation">Reserve</button>
    <p class="codeInfo">Reservation Code: D1256</p>
</div>


@code {
    // make a list of all the flights
    FlightManager fm = new FlightManager();
    List<Flight> flights = FlightManager.GetFlights();
    // make a list of all the airports
    FlightService fs = new FlightService();
    List<string> airports = FlightService.GetAirports();
    // make a list of flights you set constraints for
    List<Flight> conditionedFlights = new List<Flight>();

    int clickFindFlights = 0; // Count how many times the findFlights button clicked
    string departure; // departure airport of flight finder
    string arriving; // arriving airport of flight finder
    string day; // the day of flight finder

    Flight chosenOne; // the flight chose in part2

    // info of the chosen flight
    string chosenFlightCode;
    string chosenAirline;
    string chosenDay;
    string chosenTime;
    string chosenCost;

    // reserve info
    string writtenName;
    string citizenship;
    List<Reservation> reservations = new List<Reservation>();

    // Caution info
    string cautionInfo;

    // get depart airline
    private void getDeparture(ChangeEventArgs e)
    {
        departure = e.Value.ToString().Substring(0, 3);
    }
    // get arriving airline
    private void getArriving(ChangeEventArgs e)
    {
        arriving = e.Value.ToString().Substring(0, 3);
    }
    // get day
    private void getDay(ChangeEventArgs e)
    {
        day = e.Value.ToString();
    }
    // get conditioned flighs list
    private void findFlights()
    {
        clickFindFlights += 1;
        conditionedFlights.Clear();
        foreach (Flight flight in flights)
        {
            if ((string.IsNullOrEmpty(departure) || flight.Departure == departure) && (string.IsNullOrEmpty(arriving) || flight.Arriving == arriving)
            && (string.IsNullOrEmpty(day) || flight.Day == day))
            {
                conditionedFlights.Add(flight);
            }
        }
        // make the first flight of the list automatically chosen in part2 bar
        if (conditionedFlights.Count > 0)
        {
            chosenOne = conditionedFlights[0];
            updateInfoOfChosenOne();
        }
        // This is for empty conditioned list
        else
        {
            chosenOne = new Flight(); // make an empty chosen one
            updateInfoOfChosenOne();
        }
    }
    // get chosenOne using info of part2
    private void getInfo(ChangeEventArgs e)
    {
        chosenOne = flights.Find(a => a.ToString() == e.Value.ToString());
        updateInfoOfChosenOne();
    }
    // populate the bars of part3 with info of the chosen flight
    private void updateInfoOfChosenOne()
    {
        if (chosenOne is not null)
        {
            chosenFlightCode = chosenOne.FlightCode;
            chosenAirline = chosenOne.Airline;
            chosenDay = chosenOne.Day;
            chosenTime = chosenOne.Time;
            chosenCost = chosenOne.Cost.ToString();
        }
        else
        {
            chosenFlightCode = "";
            chosenAirline = "";
            chosenDay = "";
            chosenTime = "";
            chosenCost = "";
        }

    }
    private void makeReservation()
    {
        try
        {
            Reservation r = new Reservation(chosenOne, writtenName, citizenship);
        }
        catch (InvalidFlightCodeException e)
        {
            cautionInfo = e.Message;
        }
        catch (InvalidNameException e)
        {
            writtenName = e.Message;
        }
        catch (InvalidCitizenshipException e)
        {
            citizenship = e.Message;
        }
    }
}
